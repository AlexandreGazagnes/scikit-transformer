{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Scikit-transformers : Scikit-learn + Custom transformers About scikit-transformers is a very usefull package to enable and provide custom transformers such as LogColumnTransformer , BoolColumnTransformers and others fancy transformers. It was created to provide a simple way to use custom transformers in scikit-learn pipelines, and allow to use them in a scikit-learn model, using GridSearchCV for testing and tuning hyperparameters. The starting point was to provide a simple LogColumnTransformer , which is a simple wrapper around the numpy log function, making possible to use a skew threshold to apply the log transformation only on columns with a skew superior to a given threshold. With scikit-transformers , it is now possible to use this LogColumnTransformer in transformer in a GridSearchCV using a skew threshold as hyperparameter to find what columns are good to log or not. LogColumnTransformer is one of the many transformers implemented in scikit-transformers . Installation Using regular pip and venv tools : python3 -m venv .venv source .venv/bin/activate pip install scikit-transformers Usage For a very basic usage : import pandas as pd from sktransf.trasnformer import LogColumnTransformer df = pd.DataFrame( { \"a\": range(10), \"b\": range(10) } ) logger = LogColumnTransformer() logger.fit_transform(df) df_transf = logger.transform(df) Using common transformers : import pandas as pd from sktransf.transformer import LogColumnTransformer, BoolColumnTransformer from sktransf.selector import DropUniqueColumnSelector df = pd.DataFrame( { \"a\": range(10), \"b\": range(10) } ) df_bool = BoolColumnTransformer().fit_transform(df) df_unique = DropUniqueColumnTransformer().fit_transform(df) df_logged = LogColumnTransformer().fit_transform(df) Using a pipeline with a scikit-learn model : import pandas as pd from sklearn.pipeline import Pipeline from sklearn.linear_model import LinearRegression from sktransf.transformer import LogColumnTransformer, BoolColumnTransformer from sktransf.selector import DropUniqueColumnSelector pipe = Pipeline([ ('bool', BoolColumnTransformer()), ('unique', DropUniqueColumnTransformer()), ('log', LogColumnTransformer()), ('model', LinearRegression()) ]) X = pd.DataFrame( { \"a\": range(10), \"b\": range(10) } ) y = range(10) pipe.fit(X, y) y_pred = pipe.predict(X) Documentation For more specific information, please refer to the notebooks: Transformers : LogColumnTransformer notebook BoolColumnTransformer notebook Selectors : DropUniqueColumnSelector notebook DropSkuColumnSelector notebook Pipelines : Pipelines notebook A complete documentation is be available on the github page . Changelog, Releases and Roadmap Please refer to the changelog page for more information. Contributing Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. For more information, please refer to the contributing page. License GPLv3","title":"Home"},{"location":"#scikit-transformers-scikit-learn-custom-transformers","text":"","title":"Scikit-transformers : Scikit-learn + Custom transformers"},{"location":"#about","text":"scikit-transformers is a very usefull package to enable and provide custom transformers such as LogColumnTransformer , BoolColumnTransformers and others fancy transformers. It was created to provide a simple way to use custom transformers in scikit-learn pipelines, and allow to use them in a scikit-learn model, using GridSearchCV for testing and tuning hyperparameters. The starting point was to provide a simple LogColumnTransformer , which is a simple wrapper around the numpy log function, making possible to use a skew threshold to apply the log transformation only on columns with a skew superior to a given threshold. With scikit-transformers , it is now possible to use this LogColumnTransformer in transformer in a GridSearchCV using a skew threshold as hyperparameter to find what columns are good to log or not. LogColumnTransformer is one of the many transformers implemented in scikit-transformers .","title":"About"},{"location":"#installation","text":"Using regular pip and venv tools : python3 -m venv .venv source .venv/bin/activate pip install scikit-transformers","title":"Installation"},{"location":"#usage","text":"For a very basic usage : import pandas as pd from sktransf.trasnformer import LogColumnTransformer df = pd.DataFrame( { \"a\": range(10), \"b\": range(10) } ) logger = LogColumnTransformer() logger.fit_transform(df) df_transf = logger.transform(df) Using common transformers : import pandas as pd from sktransf.transformer import LogColumnTransformer, BoolColumnTransformer from sktransf.selector import DropUniqueColumnSelector df = pd.DataFrame( { \"a\": range(10), \"b\": range(10) } ) df_bool = BoolColumnTransformer().fit_transform(df) df_unique = DropUniqueColumnTransformer().fit_transform(df) df_logged = LogColumnTransformer().fit_transform(df) Using a pipeline with a scikit-learn model : import pandas as pd from sklearn.pipeline import Pipeline from sklearn.linear_model import LinearRegression from sktransf.transformer import LogColumnTransformer, BoolColumnTransformer from sktransf.selector import DropUniqueColumnSelector pipe = Pipeline([ ('bool', BoolColumnTransformer()), ('unique', DropUniqueColumnTransformer()), ('log', LogColumnTransformer()), ('model', LinearRegression()) ]) X = pd.DataFrame( { \"a\": range(10), \"b\": range(10) } ) y = range(10) pipe.fit(X, y) y_pred = pipe.predict(X)","title":"Usage"},{"location":"#documentation","text":"For more specific information, please refer to the notebooks: Transformers : LogColumnTransformer notebook BoolColumnTransformer notebook Selectors : DropUniqueColumnSelector notebook DropSkuColumnSelector notebook Pipelines : Pipelines notebook A complete documentation is be available on the github page .","title":"Documentation"},{"location":"#changelog-releases-and-roadmap","text":"Please refer to the changelog page for more information.","title":"Changelog, Releases and Roadmap"},{"location":"#contributing","text":"Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. For more information, please refer to the contributing page.","title":"Contributing"},{"location":"#license","text":"GPLv3","title":"License"},{"location":"CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , [0.3.2] - 2024-02-10 Updated fix ci/cd problems Todo use ruff fix publish action [0.3.0] - 2024-02-10 Added Add validators for all classes Add Cleaner module Add StandardScaler implementation Manage problem of data drift train / test Updated Moove .utils to root folder Reshape entire module using transformer, cleaner, scaler, and selector Reshape pyproject and documentation [0.2.1] - 2024-02-09 Added Full support for official documentation Add auto deploy documentation with GitHub pages Add notebooks to the documentation Updated Moove assets and utils to docs folder Restructure all package Update documentation to include usage examples Moove Changelog and Contributing to the docs folder Clean code files, remove unused imports, useless comments, and unused variables LogTransformer is now LogColumnTransformer BoolColumnTransformer and DropUniqueColumnTransformer now accept force_df_out attribute Rename modules logger to log [0.2.0] - 2024-02-08 Added add BoolTransformer to encode bool columns add UniqueTransformer to clean cols with unique values add pre-commit support for code formatting Updated Add utils to a separate module update CI/CD to include code formatting checks [0.1.0] - 2024-01-26 Updated First public release Publish to PyPI","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog ,","title":"Changelog"},{"location":"CHANGELOG/#032-2024-02-10","text":"","title":"[0.3.2] - 2024-02-10"},{"location":"CHANGELOG/#updated","text":"fix ci/cd problems","title":"Updated"},{"location":"CHANGELOG/#todo","text":"use ruff fix publish action","title":"Todo"},{"location":"CHANGELOG/#030-2024-02-10","text":"","title":"[0.3.0] - 2024-02-10"},{"location":"CHANGELOG/#added","text":"Add validators for all classes Add Cleaner module Add StandardScaler implementation Manage problem of data drift train / test","title":"Added"},{"location":"CHANGELOG/#updated_1","text":"Moove .utils to root folder Reshape entire module using transformer, cleaner, scaler, and selector Reshape pyproject and documentation","title":"Updated"},{"location":"CHANGELOG/#021-2024-02-09","text":"","title":"[0.2.1] - 2024-02-09"},{"location":"CHANGELOG/#added_1","text":"Full support for official documentation Add auto deploy documentation with GitHub pages Add notebooks to the documentation","title":"Added"},{"location":"CHANGELOG/#updated_2","text":"Moove assets and utils to docs folder Restructure all package Update documentation to include usage examples Moove Changelog and Contributing to the docs folder Clean code files, remove unused imports, useless comments, and unused variables LogTransformer is now LogColumnTransformer BoolColumnTransformer and DropUniqueColumnTransformer now accept force_df_out attribute Rename modules logger to log","title":"Updated"},{"location":"CHANGELOG/#020-2024-02-08","text":"","title":"[0.2.0] - 2024-02-08"},{"location":"CHANGELOG/#added_2","text":"add BoolTransformer to encode bool columns add UniqueTransformer to clean cols with unique values add pre-commit support for code formatting","title":"Added"},{"location":"CHANGELOG/#updated_3","text":"Add utils to a separate module update CI/CD to include code formatting checks","title":"Updated"},{"location":"CHANGELOG/#010-2024-01-26","text":"","title":"[0.1.0] - 2024-01-26"},{"location":"CHANGELOG/#updated_4","text":"First public release Publish to PyPI","title":"Updated"},{"location":"CONTRIBUTING/","text":"Contributing Local development The complete test suite depends on having at least the following installed (possibly not a complete list) git (Version 2.24.0 or above is required ) python3.10.x (Required by a test which checks different python versions) poetry, pip, pipenv, virtualenv, or similar poetry is the preferred tool for managing dependencies, highly recommended Setting up an environment The project uses Poetry to manage its dependencies. Please install it using the following command : pip install poetry Then, please install the dependencies using the following command : poetry install Activate the environment using the following command : poetry shell And finally, install the pre-commit hooks using the following command : pre-commit install Running a specific test Running a specific test with the environment activated is as easy as: pytest tests -k test_the_name_of_your_test Running all the tests With the environment activated you can run all of the tests using: pytest tests Documentation For more specific information, please refer to the notebooks: Transformers : LogColumnTransformer notebook BoolColumnTransformer notebook Selectors : DropUniqueColumnSelector notebook DropSkuColumnSelector notebook Pipelines : Pipelines notebook Contributing Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. For more information, please refer to the contributing page.","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"","title":"Contributing"},{"location":"CONTRIBUTING/#local-development","text":"The complete test suite depends on having at least the following installed (possibly not a complete list) git (Version 2.24.0 or above is required ) python3.10.x (Required by a test which checks different python versions) poetry, pip, pipenv, virtualenv, or similar poetry is the preferred tool for managing dependencies, highly recommended","title":"Local development"},{"location":"CONTRIBUTING/#setting-up-an-environment","text":"The project uses Poetry to manage its dependencies. Please install it using the following command : pip install poetry Then, please install the dependencies using the following command : poetry install Activate the environment using the following command : poetry shell And finally, install the pre-commit hooks using the following command : pre-commit install","title":"Setting up an environment"},{"location":"CONTRIBUTING/#running-a-specific-test","text":"Running a specific test with the environment activated is as easy as: pytest tests -k test_the_name_of_your_test","title":"Running a specific test"},{"location":"CONTRIBUTING/#running-all-the-tests","text":"With the environment activated you can run all of the tests using: pytest tests","title":"Running all the tests"},{"location":"CONTRIBUTING/#documentation","text":"For more specific information, please refer to the notebooks: Transformers : LogColumnTransformer notebook BoolColumnTransformer notebook Selectors : DropUniqueColumnSelector notebook DropSkuColumnSelector notebook Pipelines : Pipelines notebook","title":"Documentation"},{"location":"CONTRIBUTING/#contributing_1","text":"Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. For more information, please refer to the contributing page.","title":"Contributing"},{"location":"api-reference/","text":"API Reference Anili decipienda eo perdere est ingenium canenda Lorem markdownum aevo, solutis illam Troius subit quid una honore crede visa tenet mea imagine tegemus restabat caeca, in ! In dedit, Epidauria, stirpi, me ossa noctis vos oret, ait. Ignes partu iampridem exilio tum, mallet dum materno Dryopen rustica resonis per modo murmur hoc contenta iuvenem meique. Coronis mecum tamen concretam lingua tuam Haec anima arcus dum axem reportat Et rami sequentia haud fortuna diruta et Illius passa ramos sororum patriam Milite sole campus cum erigitur moenia, unus circumdare. Ceu patrique colles. Ursos Cadmeida de sternit partes cursu atris mihi data sic. Lunares vestes percussit tracto praeside inops loquiturque avidosque aversata illis, domos. Diffugiunt pietatis timore Litus habitabilis curis viribus conceperat totis Aetnae Pallas nec ubi ossibus dicta. Summaque per. Viridis inmemor sanguis omnia inde ipsos intercepta illic sunt cum prensurum iugis spinae. In eandem rurisque dominum, at Ulixes quoque io flecti et tempus emissi cacumen. Loquendo volucres nunc nec clarae lingua invenies vir viderit, haec. Cadit vulnera tibi, suis intremuere tamen turbineo Iasonis o morte postquam nequeat crinale coniugis. Fuerunt perdiderat Capitolia solis, plangor, rudentes subitarum dicenti capiti Abantiades, templa dant Alcyonae. Debebat vatis Aphareus et nutrix fatorum spernenda, venenum volucres virum Talibus prodigio dolentius. Suis est Erinyn crinitas raptam: pars sic colligit percepto. Hausi in hic tanto quereretur et atque pondera; saxa, positoque et cura. Capere dato homini nec creatus vidit ignes corde et Rhodope, videri thalamosque Tres, sint ille est siquid extulit. Multos Ligdum opus! Quid videt extremum peccasse sucis volucrisque comes fores, venit. In vultus et antiquus annum; rerum opus illa?","title":"API Reference"},{"location":"api-reference/#api-reference","text":"","title":"API Reference"},{"location":"api-reference/#anili-decipienda-eo-perdere-est-ingenium-canenda","text":"Lorem markdownum aevo, solutis illam Troius subit quid una honore crede visa tenet mea imagine tegemus restabat caeca, in ! In dedit, Epidauria, stirpi, me ossa noctis vos oret, ait. Ignes partu iampridem exilio tum, mallet dum materno Dryopen rustica resonis per modo murmur hoc contenta iuvenem meique. Coronis mecum tamen concretam lingua tuam Haec anima arcus dum axem reportat Et rami sequentia haud fortuna diruta et Illius passa ramos sororum patriam Milite sole campus cum erigitur moenia, unus circumdare. Ceu patrique colles. Ursos Cadmeida de sternit partes cursu atris mihi data sic. Lunares vestes percussit tracto praeside inops loquiturque avidosque aversata illis, domos.","title":"Anili decipienda eo perdere est ingenium canenda"},{"location":"api-reference/#diffugiunt-pietatis-timore","text":"Litus habitabilis curis viribus conceperat totis Aetnae Pallas nec ubi ossibus dicta. Summaque per. Viridis inmemor sanguis omnia inde ipsos intercepta illic sunt cum prensurum iugis spinae. In eandem rurisque dominum, at Ulixes quoque io flecti et tempus emissi cacumen. Loquendo volucres nunc nec clarae lingua invenies vir viderit, haec. Cadit vulnera tibi, suis intremuere tamen turbineo Iasonis o morte postquam nequeat crinale coniugis. Fuerunt perdiderat Capitolia solis, plangor, rudentes subitarum dicenti capiti Abantiades, templa dant Alcyonae. Debebat vatis Aphareus et nutrix fatorum spernenda, venenum volucres virum Talibus prodigio dolentius. Suis est Erinyn crinitas raptam: pars sic colligit percepto. Hausi in hic tanto quereretur et atque pondera; saxa, positoque et cura. Capere dato homini nec creatus vidit ignes corde et Rhodope, videri thalamosque Tres, sint ille est siquid extulit. Multos Ligdum opus! Quid videt extremum peccasse sucis volucrisque comes fores, venit. In vultus et antiquus annum; rerum opus illa?","title":"Diffugiunt pietatis timore"},{"location":"installation/","text":"Installation Using regular pip and venv tools Creating a virtual environment : python3 -m venv .venv source .venv/bin/activate It is recommended to use a virtual environment to install the package. Installing the package : pip install scikit-transformers [--upgrade] [--user] Using poetry or pipenv It is recommended to use a virtual environment to install the package. pip install poetry poetry init poetry add scikit-transformers Check the installation You can check the installation by running the following command : pip show scikit-transformers or pip list | grep scikit-transformers","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#using-regular-pip-and-venv-tools","text":"Creating a virtual environment : python3 -m venv .venv source .venv/bin/activate It is recommended to use a virtual environment to install the package. Installing the package : pip install scikit-transformers [--upgrade] [--user]","title":"Using regular pip and venv tools"},{"location":"installation/#using-poetry-or-pipenv","text":"It is recommended to use a virtual environment to install the package. pip install poetry poetry init poetry add scikit-transformers","title":"Using poetry or pipenv"},{"location":"installation/#check-the-installation","text":"You can check the installation by running the following command : pip show scikit-transformers or pip list | grep scikit-transformers","title":"Check the installation"},{"location":"releases/","text":"Sine regia tegis poenas mediis secretaque sed Pro ardent nefasque Lorem markdownum suis O in et fuerat stimulosque data ambrosiam gregibus, hic regna Hippolytum omnia. Tangit inmenso, serpentis in undas fer concrescere precibus equam . Iuno decipiet Coeptis ac ibant, quae non semper prius admirantibus Iolaus. Inops manu iuncta circumfususque bis: Spercheides Aoniis subde Phorcynida erat hamadryadas magnis iubet invenies hamis oblivia. Crevit cum, postque: licet damna satis, cingebant et omnem: sanguine cetera. Manus cor negabat nomen gestasset tenens. In est quoquam veni atque lactantiaque Fames simulatas exspectata nutricis, tu adfata dictae, in levi, aut. Toto grandine torquent flammas Obuncis tenvit! Hora duorum parvaque inutilior imum miratur , caeli sit quoniam cum tetigit adlevet oculos. Ad durata, ut hac eripuit Diomede comminus capillos in. Tela cura Calydonides casu Eurydicen notamque hoc De hoc dissipat arte tamen haerebat Ambos vetaris accessit Tui piis usus ab aestu sparsi Polydegmona Suae quaeratur Petunt mento portusque sanguine et vocanti praebet Nec nefas vertuntur: regina iter clausus, se adeunda, expendite, capillis Dixerat cursu ? Semper hoc manusque corripe opiferque duce, cornibus tura rostrum dixisse artificem sine sperni pellant; saevisque Ulixe, nec. Non et veniunt exitus urbe minus ducunt quoque et bellis coniurataeque irae saevi in et nequit flumine nostros malum. Caudae anseribus mater infernum. Per suo harena concurrere cornuaque quam Pallorque Arbiter est altos iam voverat teste Nelei Patula parentis Anima pavonibus Negata muneris paratus renidenti explorat quae in Quirini ignesque abiit Conanti umbra aera constitit aurem, mundo avidi domus curat tamen, in Icare opibusque. Pinna ego carinae natus medius flebilis lingua pugnavique Phineus solos et ictus refert ad committit, corpus. Quid per ostendit tollit necopina iamque nocti utque et quod, nec sic idque iratus illa altissima. Vidit crepitantia genuit cervus maximus, Danai ipse canes animum fecit haud, tandemque. Maiora saxum, colebat repandus repetita finire frementes. Crimine nocet uno avis facit mensis: est diro latratibus artes: ferri.","title":"Sine regia tegis poenas mediis secretaque sed"},{"location":"releases/#sine-regia-tegis-poenas-mediis-secretaque-sed","text":"","title":"Sine regia tegis poenas mediis secretaque sed"},{"location":"releases/#pro-ardent-nefasque","text":"Lorem markdownum suis O in et fuerat stimulosque data ambrosiam gregibus, hic regna Hippolytum omnia. Tangit inmenso, serpentis in undas fer concrescere precibus equam .","title":"Pro ardent nefasque"},{"location":"releases/#iuno-decipiet","text":"Coeptis ac ibant, quae non semper prius admirantibus Iolaus. Inops manu iuncta circumfususque bis: Spercheides Aoniis subde Phorcynida erat hamadryadas magnis iubet invenies hamis oblivia. Crevit cum, postque: licet damna satis, cingebant et omnem: sanguine cetera. Manus cor negabat nomen gestasset tenens. In est quoquam veni atque lactantiaque Fames simulatas exspectata nutricis, tu adfata dictae, in levi, aut.","title":"Iuno decipiet"},{"location":"releases/#toto-grandine-torquent-flammas","text":"Obuncis tenvit! Hora duorum parvaque inutilior imum miratur , caeli sit quoniam cum tetigit adlevet oculos. Ad durata, ut hac eripuit Diomede comminus capillos in. Tela cura Calydonides casu Eurydicen notamque hoc De hoc dissipat arte tamen haerebat Ambos vetaris accessit Tui piis usus ab aestu sparsi Polydegmona Suae quaeratur","title":"Toto grandine torquent flammas"},{"location":"releases/#petunt-mento-portusque-sanguine-et-vocanti-praebet","text":"Nec nefas vertuntur: regina iter clausus, se adeunda, expendite, capillis Dixerat cursu ? Semper hoc manusque corripe opiferque duce, cornibus tura rostrum dixisse artificem sine sperni pellant; saevisque Ulixe, nec. Non et veniunt exitus urbe minus ducunt quoque et bellis coniurataeque irae saevi in et nequit flumine nostros malum. Caudae anseribus mater infernum. Per suo harena concurrere cornuaque quam Pallorque Arbiter est altos iam voverat teste Nelei Patula parentis Anima pavonibus Negata muneris paratus renidenti explorat quae in","title":"Petunt mento portusque sanguine et vocanti praebet"},{"location":"releases/#quirini-ignesque-abiit","text":"Conanti umbra aera constitit aurem, mundo avidi domus curat tamen, in Icare opibusque. Pinna ego carinae natus medius flebilis lingua pugnavique Phineus solos et ictus refert ad committit, corpus. Quid per ostendit tollit necopina iamque nocti utque et quod, nec sic idque iratus illa altissima. Vidit crepitantia genuit cervus maximus, Danai ipse canes animum fecit haud, tandemque. Maiora saxum, colebat repandus repetita finire frementes. Crimine nocet uno avis facit mensis: est diro latratibus artes: ferri.","title":"Quirini ignesque abiit"},{"location":"troubleshooting/","text":"Nomine et adplicat glacialis litore et nives Diligis minus bibit corniger Lorem markdownum potens ibis florem si inplet Remulusque humus apris. Ducat vis egressus sit in Ecce haec ingratus domumque aequora repetita. Superi illa fameque, memor deum tandem, nullos, arma, te nostro. Aequantia tuus ruricolae alii et terrae Ego et levi cecidere teneo Phoebeamque solum femineusque teneri aestu submovit moriere tum qui. Sit aut digni ignis tenet rumpit nimiumque effugit inpediunt, guttura longosque. Fugit animae silvis. Lacertos illo Phoebus caelo vidi et huius hoc amans congestaque. Aevi litis simulatas. if (portalDeviceVram) { server_standby_search = user - whoisHsf; } else { protector_gif_ultra.mashup = parallel.banner_rss(design_power_unfriend, debugger_handle_operating, token + facebookName); } if (2 * spider_nybble * laptop_sku) { sync_wired_whois = minisitePeripheralVirtual(ntfs); start(engine_bit); } var file = 5; secondary.ray = plugRam * cpm_rss(router); Senex isdem olim aestu altum beatior Herculeos Te saxo erit glomerata Boreas nomen tendere? Muros anxia nostri est alto , vimine vites et colebat concedant sive: vestibus aether inposuere decuit adspexit aliquid? Letum indigenae anguem pariter quoque, accipiunt malorum in mihi. Ut mittunt annis maris. Monstri carmina adspiceres Tonantis inque ibi per subsedit gratamque et amentis decipit saevo concussaque superi utque, tauri sequi. Thracius pecudes hunc tali non lac ; si Danaos mensis! Credere prius. Ut locus, longaeva abest, nec Ianthe, praecedere exsangue mundo pavet iacentes Spercheides taedas? Ferit gener cecidere Lucina extemplo ! Tremensque quod. Innumerae removit dux plebe peteretur transit et Est cadebant remeabat liber etiam rutilum adhuc praeside spectari : sed. Pinum possederat pingues veloces simulantis duas chlamydis caput longa; natalis homines. Exstabat hic, et animus accepto. Sed est adiecisse similisque Rhamnusidis foedera tamen caelum canori in equi, terga. Caede arma potuit sit genialis volui caruerunt Greges fabricataque vita equorum nulla Accipe accipit regnum Corythi pectus Qua repleri pectus Clam omnia poenaque numina tuebere, in imo genitus, dextrae sua sorores. Primo pulveris nomen Iovis admirantes quidem multicavo tenuisse. Tum mea haec ager at gentesque matri nervis, fecisse posset: quem arte exstantem videbat ? In fuderat, orbes mora imagine, cum non praemiaque, ait.","title":"Nomine et adplicat glacialis litore et nives"},{"location":"troubleshooting/#nomine-et-adplicat-glacialis-litore-et-nives","text":"","title":"Nomine et adplicat glacialis litore et nives"},{"location":"troubleshooting/#diligis-minus-bibit-corniger","text":"Lorem markdownum potens ibis florem si inplet Remulusque humus apris. Ducat vis egressus sit in Ecce haec ingratus domumque aequora repetita. Superi illa fameque, memor deum tandem, nullos, arma, te nostro.","title":"Diligis minus bibit corniger"},{"location":"troubleshooting/#aequantia-tuus-ruricolae-alii-et-terrae","text":"Ego et levi cecidere teneo Phoebeamque solum femineusque teneri aestu submovit moriere tum qui. Sit aut digni ignis tenet rumpit nimiumque effugit inpediunt, guttura longosque. Fugit animae silvis. Lacertos illo Phoebus caelo vidi et huius hoc amans congestaque. Aevi litis simulatas. if (portalDeviceVram) { server_standby_search = user - whoisHsf; } else { protector_gif_ultra.mashup = parallel.banner_rss(design_power_unfriend, debugger_handle_operating, token + facebookName); } if (2 * spider_nybble * laptop_sku) { sync_wired_whois = minisitePeripheralVirtual(ntfs); start(engine_bit); } var file = 5; secondary.ray = plugRam * cpm_rss(router);","title":"Aequantia tuus ruricolae alii et terrae"},{"location":"troubleshooting/#senex-isdem-olim-aestu-altum-beatior-herculeos","text":"Te saxo erit glomerata Boreas nomen tendere? Muros anxia nostri est alto , vimine vites et colebat concedant sive: vestibus aether inposuere decuit adspexit aliquid? Letum indigenae anguem pariter quoque, accipiunt malorum in mihi. Ut mittunt annis maris. Monstri carmina adspiceres Tonantis inque ibi per subsedit gratamque et amentis decipit saevo concussaque superi utque, tauri sequi. Thracius pecudes hunc tali non lac ; si Danaos mensis! Credere prius. Ut locus, longaeva abest, nec Ianthe, praecedere exsangue mundo pavet iacentes Spercheides taedas? Ferit gener cecidere Lucina extemplo ! Tremensque quod.","title":"Senex isdem olim aestu altum beatior Herculeos"},{"location":"troubleshooting/#innumerae-removit-dux-plebe-peteretur-transit-et","text":"Est cadebant remeabat liber etiam rutilum adhuc praeside spectari : sed. Pinum possederat pingues veloces simulantis duas chlamydis caput longa; natalis homines. Exstabat hic, et animus accepto. Sed est adiecisse similisque Rhamnusidis foedera tamen caelum canori in equi, terga. Caede arma potuit sit genialis volui caruerunt Greges fabricataque vita equorum nulla Accipe accipit regnum Corythi pectus Qua repleri pectus Clam omnia poenaque numina tuebere, in imo genitus, dextrae sua sorores. Primo pulveris nomen Iovis admirantes quidem multicavo tenuisse. Tum mea haec ager at gentesque matri nervis, fecisse posset: quem arte exstantem videbat ? In fuderat, orbes mora imagine, cum non praemiaque, ait.","title":"Innumerae removit dux plebe peteretur transit et"},{"location":"usage/","text":"Usage Basic usage import pandas as pd from sktransf.trasnformer import LogColumnTransformer df = pd.DataFrame( { \"a\": range(10), \"b\": range(10) } ) logger = LogColumnTransformer() logger.fit_transform(df) df_transf = logger.transform(df) Using common transformers import pandas as pd from sktransf.transformer import LogColumnTransformer, BoolColumnTransformer from sktransf.selector import DropUniqueColumnSelector df = pd.DataFrame( { \"a\": range(10), \"b\": range(10) } ) df_bool = BoolColumnTransformer().fit_transform(df) df_unique = DropUniqueColumnTransformer().fit_transform(df) df_logged = LogColumnTransformer().fit_transform(df) Using a pipeline with a scikit-learn model import pandas as pd from sklearn.pipeline import Pipeline from sklearn.linear_model import LinearRegression from sktransf.transformer import LogColumnTransformer, BoolColumnTransformer from sktransf.selector import DropUniqueColumnSelector pipe = Pipeline([ ('bool', BoolColumnTransformer()), ('unique', DropUniqueColumnTransformer()), ('log', LogColumnTransformer()), ('model', LinearRegression()) ]) X = pd.DataFrame( { \"a\": range(10), \"b\": range(10) } ) y = range(10) pipe.fit(X, y) y_pred = pipe.predict(X) Notebooks For more specific information, please refer to the notebooks: Transformers : LogColumnTransformer notebook BoolColumnTransformer notebook Selectors : DropUniqueColumnSelector notebook DropSkuColumnSelector notebook Pipelines : Pipelines notebook","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#basic-usage","text":"import pandas as pd from sktransf.trasnformer import LogColumnTransformer df = pd.DataFrame( { \"a\": range(10), \"b\": range(10) } ) logger = LogColumnTransformer() logger.fit_transform(df) df_transf = logger.transform(df)","title":"Basic usage"},{"location":"usage/#using-common-transformers","text":"import pandas as pd from sktransf.transformer import LogColumnTransformer, BoolColumnTransformer from sktransf.selector import DropUniqueColumnSelector df = pd.DataFrame( { \"a\": range(10), \"b\": range(10) } ) df_bool = BoolColumnTransformer().fit_transform(df) df_unique = DropUniqueColumnTransformer().fit_transform(df) df_logged = LogColumnTransformer().fit_transform(df)","title":"Using common transformers"},{"location":"usage/#using-a-pipeline-with-a-scikit-learn-model","text":"import pandas as pd from sklearn.pipeline import Pipeline from sklearn.linear_model import LinearRegression from sktransf.transformer import LogColumnTransformer, BoolColumnTransformer from sktransf.selector import DropUniqueColumnSelector pipe = Pipeline([ ('bool', BoolColumnTransformer()), ('unique', DropUniqueColumnTransformer()), ('log', LogColumnTransformer()), ('model', LinearRegression()) ]) X = pd.DataFrame( { \"a\": range(10), \"b\": range(10) } ) y = range(10) pipe.fit(X, y) y_pred = pipe.predict(X)","title":"Using a pipeline with a scikit-learn model"},{"location":"usage/#notebooks","text":"For more specific information, please refer to the notebooks: Transformers : LogColumnTransformer notebook BoolColumnTransformer notebook Selectors : DropUniqueColumnSelector notebook DropSkuColumnSelector notebook Pipelines : Pipelines notebook","title":"Notebooks"},{"location":"api/BoolColumnTransformer/","text":"BoolColumnTransformer","title":"BoolColumnTransformer"},{"location":"api/BoolColumnTransformer/#boolcolumntransformer","text":"","title":"BoolColumnTransformer"},{"location":"api/DropUniqueColumnTransformer/","text":"DropUniqueColumnTransformer","title":"DropUniqueColumnTransformer"},{"location":"api/DropUniqueColumnTransformer/#dropuniquecolumntransformer","text":"","title":"DropUniqueColumnTransformer"},{"location":"api/LogColumnTransformer/","text":"LogColumnTransformer","title":"LogColumnTransformer"},{"location":"api/LogColumnTransformer/#logcolumntransformer","text":"","title":"LogColumnTransformer"},{"location":"api/Pipelines/","text":"Pipelines","title":"Pipelines"},{"location":"api/Pipelines/#pipelines","text":"","title":"Pipelines"}]}